swagger: '2.0'
info:
  description: Bla bla bla
  version: 1.0.0
  title: User and team - LozziKit
host: 'localhost:8080'
basePath: /
tags:
  - name: user
    description: Operations about user
schemes:
  - http
  - https
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
paths:
  /users:
    post:
      tags:
        - user
      summary: Create user
      description: Create a new user
      operationId: createUser
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Created user object
          required: true
          schema:
            $ref: '#/definitions/NewUser'
      responses:
        '201':
          description: successful operation
          headers:
            Location:
              type: string
        '400':
          description: Bad request
          schema:
            type: string
        '409':
          description: Username/email exists already
    get:
      security:
        - Bearer: []
      tags:
        - user
      summary: Get users
      description: Get all the users
      operationId: getUsers
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
  '/users/{username}':
    get:
      security:
        - Bearer: []
      tags:
        - user
      summary: Get user
      description: Get a user
      operationId: getUser
      produces:
        - application/json
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '404':
          description: User not found
    patch:
      tags:
        - user
      summary: Modify user
      description: Modify an existing user
      operationId: updateUser
      produces:
        - application/json
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched'
          required: true
          type: string
        - in: body
          name: body
          description: Modified user object
          required: true
          schema:
            $ref: '#/definitions/UserModified'
      responses:
        '200':
          description: successful operation
        '400':
          description: Bad request
          schema:
            type: string
  /auth:
    post:
      tags:
        - auth
      summary: Authenticate a user
      description: Authenticate a user
      operationId: authUser
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Created user object
          required: true
          schema:
            $ref: '#/definitions/Credentials'
      responses:
        '200':
          description: successful operation
          headers:
            Authorization:
              type: string
        '400':
          description: Bad request
          schema:
            type: string
        '401':
          description: Unauthorized username or password
          schema:
            type: string
definitions:
  NewUser:
    type: object
    properties:
      username:
        type: string
        minLength: 4
      firstName:
        type: string
        minLength: 4
      lastName:
        type: string
        minLength: 4
      email:
        type: string
        format: email
        pattern: '^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$'
        minLength: 6
      password:
        type: string
        format: password
        minLength: 4
    required:
      - username
      - firstName
      - lastName
      - email
      - password
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
    required:
      - id
      - username
      - firstName
      - lastName
      - email
  UserModified:
    type: object
    properties:
      username:
        type: string
        minLength: 4
      firstName:
        type: string
        minLength: 4
      lastName:
        type: string
        minLength: 4
      email:
        type: string
        pattern: '^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$'
        minLength: 6
      password:
        type: string
        format: password
        minLength: 4
  Credentials:
    type: object
    properties:
      username:
        type: string
      password:
        type: string
    required:
      - username
      - password